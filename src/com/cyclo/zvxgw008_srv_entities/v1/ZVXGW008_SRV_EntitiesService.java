package com.cyclo.zvxgw008_srv_entities.v1;

/*
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
*/

import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URLEncoder;
import java.util.LinkedList;
import java.util.List;

import android.content.res.Resources.NotFoundException;

import com.cyclo.zvxgw008_srv_entities.v1.entitytypes.Customer;
import com.cyclo.zvxgw008_srv_entities.v1.entitytypes.Material;
import com.sap.gwpa.proxy.ODataQuery;
import com.sap.mobile.lib.configuration.IPreferences;
import com.sap.mobile.lib.configuration.Preferences;
import com.sap.mobile.lib.configuration.PreferencesException;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataSchema;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.IParser;
import com.sap.mobile.lib.parser.Parser;
import com.sap.mobile.lib.parser.ParserException;
import com.sap.mobile.lib.supportability.ILogger;
import com.sap.mobile.lib.supportability.Logger;


/**
 * ZVXGW008_SRV_EntitiesService Proxy Class 
 * <br>Material minimal
 * <br>Service Version: v1. */
public class ZVXGW008_SRV_EntitiesService
{
    private String baseUrl;
	
    private ILogger logger;
    private IPreferences preferences;
    private IParser parser;

    private IODataServiceDocument serviceDocument;
    private IODataSchema schema;
   
    /**
     * Constructs a new service (proxy) class, with the given parameters.
     * @param context - application context.
     * @param aServiceDocument - service document.
     * @param aServiceMetadata - service metadata.
     */
   	public ZVXGW008_SRV_EntitiesService(android.content.Context context, String aServiceDocument, String aServiceMetadata)
   	{
    	initISDMParameters(context);
    	parseServiceDocumentAndMetadata(context, aServiceDocument, aServiceMetadata);
   	}
   	
    /**
     * Constructs a new service (proxy) class, with the given parameter.
     * @param context - application context.
     */
    public ZVXGW008_SRV_EntitiesService(android.content.Context context)
    {
    	this(context, null, null);
    }
	
    /*
     * Parses the service document and metadata.
     */
    private void parseServiceDocumentAndMetadata(android.content.Context context, String aServiceDocument, String aServiceMetadata)
    {
    	try 
    	{
			if (aServiceDocument == null || aServiceMetadata == null)
			{
				serviceDocument = parser.parseODataServiceDocument(context.getResources().openRawResource(com.cyclo.R.raw.zvxgw008_srv_entitiesv1document));
				schema = parser.parseODataSchema(context.getResources().openRawResource(com.cyclo.R.raw.zvxgw008_srv_entitiesv1metadata),serviceDocument);
			}
			else
			{
				serviceDocument = parser.parseODataServiceDocument(aServiceDocument);
				schema = parser.parseODataSchema(aServiceMetadata,serviceDocument);
			}	
            			
			setUrl(serviceDocument.getBaseUrl());
			loadLabels();
        }
 		catch (NotFoundException e)
		{
			throw new ExceptionInInitializerError(e);
		} 
		catch (IllegalArgumentException e) 
		{
			throw new ExceptionInInitializerError(e);
		} 
		catch (ParserException e) 
		{
			throw new ExceptionInInitializerError(e);
		}	
    }
    
    private void initISDMParameters(android.content.Context context)
    {
    	logger = new Logger();
		preferences = new Preferences(context, logger);
		
		try 
		{
			preferences.setBooleanPreference(IPreferences.PERSISTENCE_SECUREMODE, false);
			parser = new Parser(preferences, logger);
		} 
		catch (PreferencesException e) 
		{
			throw new ExceptionInInitializerError(e);
		}
		catch (ParserException e) 
		{
			throw new ExceptionInInitializerError(e);
		}
    }
	
    /**
     * Returns the parser of this proxy class.
     * @return IParser.
     */
	public IParser getParser() 
	{
		return this.parser;
	}

	/**
	 * Returns the service document.
	 * @return - IODataServiceDocument.
	 */
	public IODataServiceDocument getServiceDocument() 
	{
		return this.serviceDocument;
	}

	/**
	 * Returns the schema of the service.
	 * @return - IODataSchema.
	 */
	public IODataSchema getSchema() 
	{
		return this.schema;
	}

    /**
     * Returns the base URL of the service.
     * @return - the base URL of the service.
     */
    public String getBaseUrl() 
	{
		return this.baseUrl;
    }
    
    /**
     * Sets the base URL of the service.
     * @param url - the url to set.
     */
    public void setUrl(String url) 
	{
		if (url.endsWith("/"))
    	{
    		baseUrl = url;
    	}
    	else
    	{
    		baseUrl = url + "/";
    	}
    }
	
	/**
     * Loads the labels for each entity type.
     * This method is called by the class initialisers.
     */
    public void loadLabels()
	{
		Customer.loadLabels(this.serviceDocument);
		Material.loadLabels(this.serviceDocument);
	}
	
// service collections

    /**
     * @return - the CustomerSetQuery
     * @throws - MalformedURLException
     */
    public ODataQuery getCustomerSetQuery() throws MalformedURLException
    {
		return new ODataQuery(getBaseUrl() + "CustomerSet?$filter=CustomerID%20ge%20'A05'%20and%20CustomerID%20le%20'A06'");
    }

    /**
     * @return - the MaterialSetQuery
     * @throws - MalformedURLException
     */
    public ODataQuery getMaterialSetQuery() throws MalformedURLException
    {
		return new ODataQuery(getBaseUrl() + "MaterialSet?$filter=MaterialID%20ge%20'A05'%20and%20MaterialID%20le%20'A06'");
    }
	

   /**
    * CustomerSetQuery with Key
    *
    * @throws MalformedURLException 
    */
    public ODataQuery getCustomerSetEntryQuery( String CustomerID)  throws MalformedURLException, UnsupportedEncodingException
    {
		CustomerID = URLEncoder.encode(CustomerID, "UTF-8"); 

		return new ODataQuery(getBaseUrl() + "CustomerSet("+"CustomerID='"+CustomerID+"')");
    }

   /**
    * MaterialSetQuery with Key
    *
    * @throws MalformedURLException 
    */
    public ODataQuery getMaterialSetEntryQuery( String MaterialID)  throws MalformedURLException, UnsupportedEncodingException
    {
		MaterialID = URLEncoder.encode(MaterialID, "UTF-8"); 

		return new ODataQuery(getBaseUrl() + "MaterialSet("+"MaterialID='"+MaterialID+"')");
    }
	 
	
	/**
	 * @return - the CustomerSet
	 * @throws - ParserException
	 * @throws - MalformedURLException 
	 */
	public List<Customer> getCustomerSet(String data) throws ParserException, MalformedURLException
	{
		List<Customer> returnList  = new LinkedList<Customer>();
		List<IODataEntry> list  = parser.parseODataEntries(data, "CustomerSet", schema);
		
		for (IODataEntry isdmoDataEntry : list) 
		{
			returnList.add(new Customer(isdmoDataEntry, parser, schema));
		}
		return returnList;
	 }
	
	/**
	 * @return - the MaterialSet
	 * @throws - ParserException
	 * @throws - MalformedURLException 
	 */
	public List<Material> getMaterialSet(String data) throws ParserException, MalformedURLException
	{
		List<Material> returnList  = new LinkedList<Material>();
		List<IODataEntry> list  = parser.parseODataEntries(data, "MaterialSet", schema);
		
		for (IODataEntry isdmoDataEntry : list) 
		{
			returnList.add(new Material(isdmoDataEntry, parser, schema));
		}
		return returnList;
	 }

		
		
	/**
	 * @return - Customer when sending the key of Customer
	 * @throws - ParserException
	 * @throws MalformedURLException
	 */
	public Customer getCustomerSetEntry(String data) throws ParserException, MalformedURLException
	{
		List<IODataEntry> list = parser.parseODataEntries(data, "CustomerSet", schema);
		return new Customer(list.get(0), parser, schema);
	}
		
		
	/**
	 * @return - Material when sending the key of Material
	 * @throws - ParserException
	 * @throws MalformedURLException
	 */
	public Material getMaterialSetEntry(String data) throws ParserException, MalformedURLException
	{
		List<IODataEntry> list = parser.parseODataEntries(data, "MaterialSet", schema);
		return new Material(list.get(0), parser, schema);
	}

} 
