package com.cyclo.zvxgw008_srv_entities.v1.entitytypes;
/*

 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1

*/
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sap.gwpa.proxy.BaseEntityType;
import com.sap.gwpa.proxy.ODataQuery;
import com.sap.gwpa.proxy.TypeConverter;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataSchema;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.IParser;

/**
 * Customer Entity Type 
 *
 * <br>key (CustomerID)
 */
public class Customer extends BaseEntityType 
{
	// Customer properties
    private String CustomerID;
    private String Name;
    private String Country;
    private String Countryiso;
    private String City;
    private String PostlCod1;
    private String Region;
    private String Street;
    private String Tel1Numbr;

	// reference to the parser
	private IParser parser;
	// reference to the schema
	private IODataSchema schema;

	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");


	private static Map<String, String> customerLabels;

	private static Map<String, String> customerTypes;	
	
	/**
	 * Constructor
	 * @param entry
	 * @throws MalformedURLException
	 */
	public Customer(final IODataEntry entry, IParser parser, IODataSchema schema) throws MalformedURLException
	{
		super(entry);
		this.CustomerID =  TypeConverter.getAsString(entry.getPropertyValue("CustomerID"));
		this.Name =  TypeConverter.getAsString(entry.getPropertyValue("Name"));
		this.Country =  TypeConverter.getAsString(entry.getPropertyValue("Country"));
		this.Countryiso =  TypeConverter.getAsString(entry.getPropertyValue("Countryiso"));
		this.City =  TypeConverter.getAsString(entry.getPropertyValue("City"));
		this.PostlCod1 =  TypeConverter.getAsString(entry.getPropertyValue("PostlCod1"));
		this.Region =  TypeConverter.getAsString(entry.getPropertyValue("Region"));
		this.Street =  TypeConverter.getAsString(entry.getPropertyValue("Street"));
		this.Tel1Numbr =  TypeConverter.getAsString(entry.getPropertyValue("Tel1Numbr"));
	    this.parser = parser;
        this.schema = schema;
 	}
	



	// Customer properties getters and setters
		
	/**
	 * @return - String Debitor
	 */
	public String getCustomerID()
	{
		return this.CustomerID;
	}
	
	/**
	 * @param CustomerID - Debitor
	 */
	public void setCustomerID(String CustomerID)
	{
		this.CustomerID = CustomerID;
		
		getEntry().putPropertyValue("CustomerID", CustomerID);
	}
		
	/**
	 * @return - String Name
	 */
	public String getName()
	{
		return this.Name;
	}
	
	/**
	 * @param Name - Name
	 */
	public void setName(String Name)
	{
		this.Name = Name;
		
		getEntry().putPropertyValue("Name", Name);
	}
		
	/**
	 * @return - String Land
	 */
	public String getCountry()
	{
		return this.Country;
	}
	
	/**
	 * @param Country - Land
	 */
	public void setCountry(String Country)
	{
		this.Country = Country;
		
		getEntry().putPropertyValue("Country", Country);
	}
		
	/**
	 * @return - String ISO-Code
	 */
	public String getCountryiso()
	{
		return this.Countryiso;
	}
	
	/**
	 * @param Countryiso - ISO-Code
	 */
	public void setCountryiso(String Countryiso)
	{
		this.Countryiso = Countryiso;
		
		getEntry().putPropertyValue("Countryiso", Countryiso);
	}
		
	/**
	 * @return - String Ort
	 */
	public String getCity()
	{
		return this.City;
	}
	
	/**
	 * @param City - Ort
	 */
	public void setCity(String City)
	{
		this.City = City;
		
		getEntry().putPropertyValue("City", City);
	}
		
	/**
	 * @return - String Postleitzahl
	 */
	public String getPostlCod1()
	{
		return this.PostlCod1;
	}
	
	/**
	 * @param PostlCod1 - Postleitzahl
	 */
	public void setPostlCod1(String PostlCod1)
	{
		this.PostlCod1 = PostlCod1;
		
		getEntry().putPropertyValue("PostlCod1", PostlCod1);
	}
		
	/**
	 * @return - String Region
	 */
	public String getRegion()
	{
		return this.Region;
	}
	
	/**
	 * @param Region - Region
	 */
	public void setRegion(String Region)
	{
		this.Region = Region;
		
		getEntry().putPropertyValue("Region", Region);
	}
		
	/**
	 * @return - String Straﬂe
	 */
	public String getStreet()
	{
		return this.Street;
	}
	
	/**
	 * @param Street - Straﬂe
	 */
	public void setStreet(String Street)
	{
		this.Street = Street;
		
		getEntry().putPropertyValue("Street", Street);
	}
		
	/**
	 * @return - String Telefon
	 */
	public String getTel1Numbr()
	{
		return this.Tel1Numbr;
	}
	
	/**
	 * @param Tel1Numbr - Telefon
	 */
	public void setTel1Numbr(String Tel1Numbr)
	{
		this.Tel1Numbr = Tel1Numbr;
		
		getEntry().putPropertyValue("Tel1Numbr", Tel1Numbr);
	}
	
	/**
	 * @return - representation of the Entity Type object in OData4SAP format
	 */
	public String getStringPayload()  
	{
		String xml = null;
		
		xml = getEntry().toXMLString();
			
		return xml;
	}
	
	/**
	 * @return - self ODataQuery object
	 * @throws MalformedURLException 
	 */
	public ODataQuery getEntityQuery() throws MalformedURLException  
	{
		return new ODataQuery(getEntry().getSelfLink().getUrl());
	}
	
	/**
	 * @return - the date format.
	 */
	public DateFormat getDateFormat()
	{
		return this.dateFormat;
	}


	/**
    * Static method that loads all of the entity type property labels. 
    * This method is called when the service class is initialized.
    * @param service Service document object containing all of the entity type properties.
   	*/	
    public static void loadLabels(IODataServiceDocument service)
    {
    	List<IODataProperty> properties = getSchemaPropertiesFromCollection(service, "CustomerSet" );
        
    	customerLabels = new HashMap<String, String>();
    	customerTypes = new HashMap<String, String>();
    	
    	if (properties != null)
    	{
	        for (IODataProperty property : properties) 
	        {
	        	customerLabels.put(property.getName(), property.getLabel());
	        	customerTypes.put(property.getName(), property.getType());
			}
    	}
    }
    
    
    /**
    * Static method that returns the type for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getTypeForProperty(String propertyName)
    {
        return getLabelFromDictionary(customerTypes, propertyName);
    }
    
    
    /**
    * Static method that returns the label for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getLabelForProperty(String propertyName)
    {
        return getLabelFromDictionary(customerLabels, propertyName);
    }
}