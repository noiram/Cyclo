package com.cyclo.zvxgw008_srv_entities.v1.entitytypes;
/*

 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1

*/
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sap.gwpa.proxy.BaseEntityType;
import com.sap.gwpa.proxy.ODataQuery;
import com.sap.gwpa.proxy.TypeConverter;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataSchema;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.IParser;

/**
 * Material Entity Type 
 *
 * <br>key (MaterialID)
 */
public class Material extends BaseEntityType 
{
	// Material properties
    private String ChangedBy;
    private Date LastChnge;
    private String CreatedBy;
    private Date CreatedOn;
    private String UnitOfWt;
    private BigDecimal GrossWt;
    private String SizeDim;
    private String BaseUom;
    private String IndSector;
    private String MatlType;
    private String MatlDesc;
    private String MaterialID;

	// reference to the parser
	private IParser parser;
	// reference to the schema
	private IODataSchema schema;

	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");


	private static Map<String, String> materialLabels;

	private static Map<String, String> materialTypes;	
	
	/**
	 * Constructor
	 * @param entry
	 * @throws MalformedURLException
	 */
	public Material(final IODataEntry entry, IParser parser, IODataSchema schema) throws MalformedURLException
	{
		super(entry);
		this.ChangedBy =  TypeConverter.getAsString(entry.getPropertyValue("ChangedBy"));
		this.LastChnge =  TypeConverter.getAsDate(entry.getPropertyValue("LastChnge"));
		this.CreatedBy =  TypeConverter.getAsString(entry.getPropertyValue("CreatedBy"));
		this.CreatedOn =  TypeConverter.getAsDate(entry.getPropertyValue("CreatedOn"));
		this.UnitOfWt =  TypeConverter.getAsString(entry.getPropertyValue("UnitOfWt"));
		this.GrossWt =  TypeConverter.getAsFloat(entry.getPropertyValue("GrossWt"));
		this.SizeDim =  TypeConverter.getAsString(entry.getPropertyValue("SizeDim"));
		this.BaseUom =  TypeConverter.getAsString(entry.getPropertyValue("BaseUom"));
		this.IndSector =  TypeConverter.getAsString(entry.getPropertyValue("IndSector"));
		this.MatlType =  TypeConverter.getAsString(entry.getPropertyValue("MatlType"));
		this.MatlDesc =  TypeConverter.getAsString(entry.getPropertyValue("MatlDesc"));
		this.MaterialID =  TypeConverter.getAsString(entry.getPropertyValue("MaterialID"));
	    this.parser = parser;
        this.schema = schema;
 	}
	



	// Material properties getters and setters
		
	/**
	 * @return - String Geändert von
	 */
	public String getChangedBy()
	{
		return this.ChangedBy;
	}
	
	/**
	 * @param ChangedBy - Geändert von
	 */
	public void setChangedBy(String ChangedBy)
	{
		this.ChangedBy = ChangedBy;
		
		getEntry().putPropertyValue("ChangedBy", ChangedBy);
	}
		
	/**
	 * @return - Date Letzte Änderung
	 */
	public Date getLastChnge()
	{
		return this.LastChnge;
	}
	
	/**
	 * @param LastChnge - Letzte Änderung
	 */
	public void setLastChnge(Date LastChnge)
	{
		this.LastChnge = LastChnge;
		
		getEntry().putPropertyValue("LastChnge", dateFormat.format(LastChnge));
	}
		
	/**
	 * @return - String Angelegt von
	 */
	public String getCreatedBy()
	{
		return this.CreatedBy;
	}
	
	/**
	 * @param CreatedBy - Angelegt von
	 */
	public void setCreatedBy(String CreatedBy)
	{
		this.CreatedBy = CreatedBy;
		
		getEntry().putPropertyValue("CreatedBy", CreatedBy);
	}
		
	/**
	 * @return - Date Erstellt am
	 */
	public Date getCreatedOn()
	{
		return this.CreatedOn;
	}
	
	/**
	 * @param CreatedOn - Erstellt am
	 */
	public void setCreatedOn(Date CreatedOn)
	{
		this.CreatedOn = CreatedOn;
		
		getEntry().putPropertyValue("CreatedOn", dateFormat.format(CreatedOn));
	}
		
	/**
	 * @return - String Gewichtseinheit
	 */
	public String getUnitOfWt()
	{
		return this.UnitOfWt;
	}
	
	/**
	 * @param UnitOfWt - Gewichtseinheit
	 */
	public void setUnitOfWt(String UnitOfWt)
	{
		this.UnitOfWt = UnitOfWt;
		
		getEntry().putPropertyValue("UnitOfWt", UnitOfWt);
	}
		
	/**
	 * @return - BigDecimal Bruttogewicht
	 */
	public BigDecimal getGrossWt()
	{
		return this.GrossWt;
	}
	
	/**
	 * @param GrossWt - Bruttogewicht
	 */
	public void setGrossWt(BigDecimal GrossWt)
	{
		this.GrossWt = GrossWt;
		
		getEntry().putPropertyValue("GrossWt",  String.valueOf(this.GrossWt.floatValue()));
	}
		
	/**
	 * @return - String Größe/Abmess
	 */
	public String getSizeDim()
	{
		return this.SizeDim;
	}
	
	/**
	 * @param SizeDim - Größe/Abmess
	 */
	public void setSizeDim(String SizeDim)
	{
		this.SizeDim = SizeDim;
		
		getEntry().putPropertyValue("SizeDim", SizeDim);
	}
		
	/**
	 * @return - String Basis-ME
	 */
	public String getBaseUom()
	{
		return this.BaseUom;
	}
	
	/**
	 * @param BaseUom - Basis-ME
	 */
	public void setBaseUom(String BaseUom)
	{
		this.BaseUom = BaseUom;
		
		getEntry().putPropertyValue("BaseUom", BaseUom);
	}
		
	/**
	 * @return - String Branche
	 */
	public String getIndSector()
	{
		return this.IndSector;
	}
	
	/**
	 * @param IndSector - Branche
	 */
	public void setIndSector(String IndSector)
	{
		this.IndSector = IndSector;
		
		getEntry().putPropertyValue("IndSector", IndSector);
	}
		
	/**
	 * @return - String Materialart
	 */
	public String getMatlType()
	{
		return this.MatlType;
	}
	
	/**
	 * @param MatlType - Materialart
	 */
	public void setMatlType(String MatlType)
	{
		this.MatlType = MatlType;
		
		getEntry().putPropertyValue("MatlType", MatlType);
	}
		
	/**
	 * @return - String Bezeichnung
	 */
	public String getMatlDesc()
	{
		return this.MatlDesc;
	}
	
	/**
	 * @param MatlDesc - Bezeichnung
	 */
	public void setMatlDesc(String MatlDesc)
	{
		this.MatlDesc = MatlDesc;
		
		getEntry().putPropertyValue("MatlDesc", MatlDesc);
	}
		
	/**
	 * @return - String Material
	 */
	public String getMaterialID()
	{
		return this.MaterialID;
	}
	
	/**
	 * @param MaterialID - Material
	 */
	public void setMaterialID(String MaterialID)
	{
		this.MaterialID = MaterialID;
		
		getEntry().putPropertyValue("MaterialID", MaterialID);
	}
	
	/**
	 * @return - representation of the Entity Type object in OData4SAP format
	 */
	public String getStringPayload()  
	{
		String xml = null;
		
		xml = getEntry().toXMLString();
			
		return xml;
	}
	
	/**
	 * @return - self ODataQuery object
	 * @throws MalformedURLException 
	 */
	public ODataQuery getEntityQuery() throws MalformedURLException  
	{
		return new ODataQuery(getEntry().getSelfLink().getUrl());
	}
	
	/**
	 * @return - the date format.
	 */
	public DateFormat getDateFormat()
	{
		return this.dateFormat;
	}


	/**
    * Static method that loads all of the entity type property labels. 
    * This method is called when the service class is initialized.
    * @param service Service document object containing all of the entity type properties.
   	*/	
    public static void loadLabels(IODataServiceDocument service)
    {
    	List<IODataProperty> properties = getSchemaPropertiesFromCollection(service, "MaterialSet" );
        
    	materialLabels = new HashMap<String, String>();
    	materialTypes = new HashMap<String, String>();
    	
    	if (properties != null)
    	{
	        for (IODataProperty property : properties) 
	        {
	        	materialLabels.put(property.getName(), property.getLabel());
	        	materialTypes.put(property.getName(), property.getType());
			}
    	}
    }
    
    
    /**
    * Static method that returns the type for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getTypeForProperty(String propertyName)
    {
        return getLabelFromDictionary(materialTypes, propertyName);
    }
    
    
    /**
    * Static method that returns the label for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getLabelForProperty(String propertyName)
    {
        return getLabelFromDictionary(materialLabels, propertyName);
    }
}